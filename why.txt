Since I was 10 years old I have been fascinated by electronics. As a young aprentice working for a large elctronics firm in the then-still-relevant UK electronics industry of the 1980's I found myself working with in-circuit testers.

I loved the way you could command volmeters and DC sources to be connected to different bits of the circuit under computer control. One thing that particularly fascinated me was the frequency source. This was a 50/50 duty cycle square wave generator at TTL levels. It was based around a VCO and required frequent calibration to generate accurate(ish) frequencies. Over time this had settled in my mind and as I moved on to different companies (but still in the same arena) I had an urge to build my own Frequency Generator. Early on this was based around TTL counters and all sorts but my designs were never really tested and were even poor. I worked for a company where we had our own in-house test equipment including a programmable 0-2Kz 0-500v AC power source (NOTE: By programmable, I mean attached to some computer system and set by software) One "almost design) for programmable frequency source, I remember, used an elaborate set up with TTL counters and would guarantee a set number of edges in a second, but forget any sort of duty cycle. You could get all your edges in the first 50% then nothing for the next. Needless to say I only half-heartedly explored that design!

So 30 years on, I am still in IT but I never get near a soldering iron now. Out of the blue, I needed a hobby and I decided that I would start up with electronics as I got a load of fun out of it years ago.

My skills are intact although a little out of time... I still think in terms of discreet logic ICs with micro-processors to make sense of it all and my "projects" reflect this - not intending to be the most efficient design or something I could manufacture but something to keep my brain ticking over and reward me with "itches scratched". I have no idea how to do anyhting with PALs or FPGAs or ULAs or whatever - I build it all with logic and micro-controllers as the design requires. I try to avoid modules except where it makes no sense to.

This board is a single solution Frequency Meter and Frequency Generator. A PIC micro-controller hooks it all together. 

The measurement side of things is done by a single chip with some logic and a precision 1 second gate... hold the gate open for a second, count the pulses, get your measurement. The precision gate is derived by dividing the clock for the PIC down - 6 4017s do this nicely and it seems like they were just meant for this job (first in the chain is HC4017 to handle the clock) - it really is a great (if large) solution, then using a final 4017 to count 8 pulses of my 8Hz clock gives me a gate of one second +/- 100ppm from the oscillator. 

The generator is built around LTC6903 (all my demons defeated in one go!). It will hit 68MHz but doesn't go down very far and one thing I wanted was a good range of AF. Also, the device is less stable at the extremes of its ranges. I divide its output  down through a 15 stage binary divider and then choose which of the 16 resultant clocks (f, f/2, f/4, f/8 etc.) I feed to the outside world with a selector. I still get my 68MHz but by going to the lowest frequency of the chip and then the lowest "tap" on the divider, I can get 0.03Hz out of the circuit - Much lower than I need (unless I want to annoy next-door's elephant) but it demonstrates the range: 30mHz to 68MHz and pretty much anywhere in between.

So now we come back to "why?". As my wife asked "what will we be able to do with it?". It will become part of my bench equipment. Yes I know I can buy a frequency meter and generator combined, but can it be computer controlled? (Yes, both the FM & FG talk to a PC using USB and can be instructed and read in software) and is the frequency precision set with no trimming or measuring necessary?

It's a trinket... a useful one (to me at any rate) but most of all it has been great fun to build. I document it here in case you want to canibalise any part of it. 

The design is all mine and learned from experience and the various data-sheets. 

The PIC code is all mine except some bits which are duly credited - of not is the floating point calculator which has been tweaked for my needs. I use it to back-calculate a frequency request to the Octave and DAC settings for the LTC6903. Have a nose through the code for some nice hints - I am particularly proud of my interrupt driven RS232 routines... How many times have you seen code that waits for characters to be sent one at a time? Not with me, you fill a buffer, start the transmission and it gets on with it while your code carries on with other stuff.

